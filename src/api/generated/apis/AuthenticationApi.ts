/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthParams,
    AuthParamsFromJSON,
    AuthParamsToJSON,
} from '../models';

export interface GetCallbackRequest {
    session: string;
    code: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * リクエストに必要な情報を返す
     */
    async getAuthParamsRaw(): Promise<runtime.ApiResponse<AuthParams>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authParams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthParamsFromJSON(jsonValue));
    }

    /**
     * リクエストに必要な情報を返す
     */
    async getAuthParams(): Promise<AuthParams> {
        const response = await this.getAuthParamsRaw();
        return await response.value();
    }

    /**
     * コールバックを検知して、トークンを取得します。
     */
    async getCallbackRaw(requestParameters: GetCallbackRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.session === null || requestParameters.session === undefined) {
            throw new runtime.RequiredError('session','Required parameter requestParameters.session was null or undefined when calling getCallback.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCallback.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * コールバックを検知して、トークンを取得します。
     */
    async getCallback(requestParameters: GetCallbackRequest): Promise<void> {
        await this.getCallbackRaw(requestParameters);
    }

}
