/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IcalSecret,
    IcalSecretFromJSON,
    IcalSecretToJSON,
} from '../models';

export interface GetIcalRequest {
    icalToken: string;
    q?: string;
}

/**
 * 
 */
export class ICalApi extends runtime.BaseAPI {

    /**
     * Icalを取得
     */
    async getIcalRaw(requestParameters: GetIcalRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.icalToken === null || requestParameters.icalToken === undefined) {
            throw new runtime.RequiredError('icalToken','Required parameter requestParameters.icalToken was null or undefined when calling getIcal.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ical/v1/{icalToken}`.replace(`{${"icalToken"}}`, encodeURIComponent(String(requestParameters.icalToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Icalを取得
     */
    async getIcal(requestParameters: GetIcalRequest): Promise<string> {
        const response = await this.getIcalRaw(requestParameters);
        return await response.value();
    }

    /**
     * /ical で使う`secret`を取得
     */
    async getIcalSecretRaw(): Promise<runtime.ApiResponse<IcalSecret>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/ical`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IcalSecretFromJSON(jsonValue));
    }

    /**
     * /ical で使う`secret`を取得
     */
    async getIcalSecret(): Promise<IcalSecret> {
        const response = await this.getIcalSecretRaw();
        return await response.value();
    }

    /**
     * /ical で使う`secret`を再生成
     */
    async resetIcalSecretRaw(): Promise<runtime.ApiResponse<IcalSecret>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/ical`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IcalSecretFromJSON(jsonValue));
    }

    /**
     * /ical で使う`secret`を再生成
     */
    async resetIcalSecret(): Promise<IcalSecret> {
        const response = await this.resetIcalSecretRaw();
        return await response.value();
    }

}
