/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IcalSecret,
    IcalSecretFromJSON,
    IcalSecretToJSON,
    ResponseUser,
    ResponseUserFromJSON,
    ResponseUserToJSON,
} from '../models';

export interface GetUsersRequest {
    includeSuspended?: boolean;
}

export interface GrantPrivilegeRequest {
    userID: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * /ical で使う`secret`を取得
     */
    async getIcalSecretRaw(): Promise<runtime.ApiResponse<IcalSecret>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/ical`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IcalSecretFromJSON(jsonValue));
    }

    /**
     * /ical で使う`secret`を取得
     */
    async getIcalSecret(): Promise<IcalSecret> {
        const response = await this.getIcalSecretRaw();
        return await response.value();
    }

    /**
     * 自分のユーザー情報を取得
     * 自分のユーザー情報を取得
     */
    async getMeRaw(): Promise<runtime.ApiResponse<ResponseUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserFromJSON(jsonValue));
    }

    /**
     * 自分のユーザー情報を取得
     * 自分のユーザー情報を取得
     */
    async getMe(): Promise<ResponseUser> {
        const response = await this.getMeRaw();
        return await response.value();
    }

    /**
     * ユーザー一覧を返す
     */
    async getUsersRaw(requestParameters: GetUsersRequest): Promise<runtime.ApiResponse<Array<ResponseUser>>> {
        const queryParameters: any = {};

        if (requestParameters.includeSuspended !== undefined) {
            queryParameters['include-suspended'] = requestParameters.includeSuspended;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseUserFromJSON));
    }

    /**
     * ユーザー一覧を返す
     */
    async getUsers(requestParameters: GetUsersRequest): Promise<Array<ResponseUser>> {
        const response = await this.getUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
     */
    async grantPrivilegeRaw(requestParameters: GrantPrivilegeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userID === null || requestParameters.userID === undefined) {
            throw new runtime.RequiredError('userID','Required parameter requestParameters.userID was null or undefined when calling grantPrivilege.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userID}/privileged`.replace(`{${"userID"}}`, encodeURIComponent(String(requestParameters.userID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
     */
    async grantPrivilege(requestParameters: GrantPrivilegeRequest): Promise<void> {
        await this.grantPrivilegeRaw(requestParameters);
    }

    /**
     * /ical で使う`secret`を再生成
     */
    async resetIcalSecretRaw(): Promise<runtime.ApiResponse<IcalSecret>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/ical`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IcalSecretFromJSON(jsonValue));
    }

    /**
     * /ical で使う`secret`を再生成
     */
    async resetIcalSecret(): Promise<IcalSecret> {
        const response = await this.resetIcalSecretRaw();
        return await response.value();
    }

    /**
     * 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
     */
    async syncUsersRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
     */
    async syncUsers(): Promise<void> {
        await this.syncUsersRaw();
    }

}
