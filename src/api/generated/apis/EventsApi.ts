/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RequestEvent,
    RequestEventFromJSON,
    RequestEventToJSON,
    RequestSchedule,
    RequestScheduleFromJSON,
    RequestScheduleToJSON,
    RequestTag,
    RequestTagFromJSON,
    RequestTagToJSON,
    ResponseEvent,
    ResponseEventFromJSON,
    ResponseEventToJSON,
    ResponseEventDetail,
    ResponseEventDetailFromJSON,
    ResponseEventDetailToJSON,
} from '../models';

export interface AddEventTagRequest {
    eventID: string;
    requestTag: RequestTag;
}

export interface AddEventsRequest {
    requestEvent: RequestEvent;
}

export interface DeleteEventRequest {
    eventID: string;
}

export interface DeleteEventTagRequest {
    eventID: string;
    tagName: string;
}

export interface GetEventDetailRequest {
    eventID: string;
}

export interface GetEventsRequest {
    dateBegin?: string;
    dateEnd?: string;
    q?: string;
}

export interface GetEventsOfGroupRequest {
    groupID: string;
}

export interface GetEventsOfRoomRequest {
    roomID: string;
}

export interface GetMyEventsRequest {
    relation?: GetMyEventsRelationEnum;
}

export interface GetUserEventsRequest {
    userID: string;
    relation?: GetUserEventsRelationEnum;
}

export interface UpdateEventRequest {
    eventID: string;
    requestEvent: RequestEvent;
}

export interface UpdateScheduleRequest {
    eventID: string;
    requestSchedule: RequestSchedule;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * タグを追加
     * タグを追加
     */
    async addEventTagRaw(requestParameters: AddEventTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling addEventTag.');
        }

        if (requestParameters.requestTag === null || requestParameters.requestTag === undefined) {
            throw new runtime.RequiredError('requestTag','Required parameter requestParameters.requestTag was null or undefined when calling addEventTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{eventID}/tags`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestTagToJSON(requestParameters.requestTag),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * タグを追加
     * タグを追加
     */
    async addEventTag(requestParameters: AddEventTagRequest): Promise<void> {
        await this.addEventTagRaw(requestParameters);
    }

    /**
     * 部屋の使用宣言を行う
     * 部屋の使用宣言を行う
     */
    async addEventsRaw(requestParameters: AddEventsRequest): Promise<runtime.ApiResponse<ResponseEventDetail>> {
        if (requestParameters.requestEvent === null || requestParameters.requestEvent === undefined) {
            throw new runtime.RequiredError('requestEvent','Required parameter requestParameters.requestEvent was null or undefined when calling addEvents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEventToJSON(requestParameters.requestEvent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventDetailFromJSON(jsonValue));
    }

    /**
     * 部屋の使用宣言を行う
     * 部屋の使用宣言を行う
     */
    async addEvents(requestParameters: AddEventsRequest): Promise<ResponseEventDetail> {
        const response = await this.addEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * adminsのみ
     * 使用宣言を削除
     */
    async deleteEventRaw(requestParameters: DeleteEventRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling deleteEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{eventID}`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * adminsのみ
     * 使用宣言を削除
     */
    async deleteEvent(requestParameters: DeleteEventRequest): Promise<void> {
        await this.deleteEventRaw(requestParameters);
    }

    /**
     * locked=falseだけ
     * タグを削除
     */
    async deleteEventTagRaw(requestParameters: DeleteEventTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling deleteEventTag.');
        }

        if (requestParameters.tagName === null || requestParameters.tagName === undefined) {
            throw new runtime.RequiredError('tagName','Required parameter requestParameters.tagName was null or undefined when calling deleteEventTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{eventID}/tags/{tagName}`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))).replace(`{${"tagName"}}`, encodeURIComponent(String(requestParameters.tagName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * locked=falseだけ
     * タグを削除
     */
    async deleteEventTag(requestParameters: DeleteEventTagRequest): Promise<void> {
        await this.deleteEventTagRaw(requestParameters);
    }

    /**
     * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
     */
    async getEventActivitiesRaw(): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
     */
    async getEventActivities(): Promise<Array<ResponseEvent>> {
        const response = await this.getEventActivitiesRaw();
        return await response.value();
    }

    /**
     * 一件取得
     * 一件取得
     */
    async getEventDetailRaw(requestParameters: GetEventDetailRequest): Promise<runtime.ApiResponse<ResponseEventDetail>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling getEventDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{eventID}`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventDetailFromJSON(jsonValue));
    }

    /**
     * 一件取得
     * 一件取得
     */
    async getEventDetail(requestParameters: GetEventDetailRequest): Promise<ResponseEventDetail> {
        const response = await this.getEventDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * 使用宣言の情報を取得
     * 使用宣言の情報を取得
     */
    async getEventsRaw(requestParameters: GetEventsRequest): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        const queryParameters: any = {};

        if (requestParameters.dateBegin !== undefined) {
            queryParameters['dateBegin'] = requestParameters.dateBegin;
        }

        if (requestParameters.dateEnd !== undefined) {
            queryParameters['dateEnd'] = requestParameters.dateEnd;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * 使用宣言の情報を取得
     * 使用宣言の情報を取得
     */
    async getEvents(requestParameters: GetEventsRequest): Promise<Array<ResponseEvent>> {
        const response = await this.getEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * groupIdのeventsを取得
     */
    async getEventsOfGroupRaw(requestParameters: GetEventsOfGroupRequest): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling getEventsOfGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupID}/events`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * groupIdのeventsを取得
     */
    async getEventsOfGroup(requestParameters: GetEventsOfGroupRequest): Promise<Array<ResponseEvent>> {
        const response = await this.getEventsOfGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * 指定した部屋で行われるイベントを返す
     */
    async getEventsOfRoomRaw(requestParameters: GetEventsOfRoomRequest): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        if (requestParameters.roomID === null || requestParameters.roomID === undefined) {
            throw new runtime.RequiredError('roomID','Required parameter requestParameters.roomID was null or undefined when calling getEventsOfRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{roomID}/events`.replace(`{${"roomID"}}`, encodeURIComponent(String(requestParameters.roomID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * 指定した部屋で行われるイベントを返す
     */
    async getEventsOfRoom(requestParameters: GetEventsOfRoomRequest): Promise<Array<ResponseEvent>> {
        const response = await this.getEventsOfRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * 所属しているイベントを返す
     */
    async getMyEventsRaw(requestParameters: GetMyEventsRequest): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        const queryParameters: any = {};

        if (requestParameters.relation !== undefined) {
            queryParameters['relation'] = requestParameters.relation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * 所属しているイベントを返す
     */
    async getMyEvents(requestParameters: GetMyEventsRequest): Promise<Array<ResponseEvent>> {
        const response = await this.getMyEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * 所属しているイベントを返す
     */
    async getUserEventsRaw(requestParameters: GetUserEventsRequest): Promise<runtime.ApiResponse<Array<ResponseEvent>>> {
        if (requestParameters.userID === null || requestParameters.userID === undefined) {
            throw new runtime.RequiredError('userID','Required parameter requestParameters.userID was null or undefined when calling getUserEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.relation !== undefined) {
            queryParameters['relation'] = requestParameters.relation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userID}/events`.replace(`{${"userID"}}`, encodeURIComponent(String(requestParameters.userID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventFromJSON));
    }

    /**
     * 所属しているイベントを返す
     */
    async getUserEvents(requestParameters: GetUserEventsRequest): Promise<Array<ResponseEvent>> {
        const response = await this.getUserEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * adminsのみ
     * 部屋の使用宣言を更新
     */
    async updateEventRaw(requestParameters: UpdateEventRequest): Promise<runtime.ApiResponse<ResponseEventDetail>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling updateEvent.');
        }

        if (requestParameters.requestEvent === null || requestParameters.requestEvent === undefined) {
            throw new runtime.RequiredError('requestEvent','Required parameter requestParameters.requestEvent was null or undefined when calling updateEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{eventID}`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEventToJSON(requestParameters.requestEvent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventDetailFromJSON(jsonValue));
    }

    /**
     * adminsのみ
     * 部屋の使用宣言を更新
     */
    async updateEvent(requestParameters: UpdateEventRequest): Promise<ResponseEventDetail> {
        const response = await this.updateEventRaw(requestParameters);
        return await response.value();
    }

    /**
     * 自分の参加予定を編集
     */
    async updateScheduleRaw(requestParameters: UpdateScheduleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventID === null || requestParameters.eventID === undefined) {
            throw new runtime.RequiredError('eventID','Required parameter requestParameters.eventID was null or undefined when calling updateSchedule.');
        }

        if (requestParameters.requestSchedule === null || requestParameters.requestSchedule === undefined) {
            throw new runtime.RequiredError('requestSchedule','Required parameter requestParameters.requestSchedule was null or undefined when calling updateSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{eventID}/attendees/me`.replace(`{${"eventID"}}`, encodeURIComponent(String(requestParameters.eventID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestScheduleToJSON(requestParameters.requestSchedule),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 自分の参加予定を編集
     */
    async updateSchedule(requestParameters: UpdateScheduleRequest): Promise<void> {
        await this.updateScheduleRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetMyEventsRelationEnum {
    Admins = 'admins',
    Belongs = 'belongs',
    Attendees = 'attendees'
}
/**
    * @export
    * @enum {string}
    */
export enum GetUserEventsRelationEnum {
    Admins = 'admins',
    Belongs = 'belongs',
    Attendees = 'attendees'
}
